# .github/workflows/standard_trading_bot.yml
# Standard timeframes workflow (V10, V50, V75)
name: Standard Timeframes Trading Bot

on:
  schedule:
    - cron: '*/5 * * * *'  # Every 5 minutes
  workflow_dispatch:
  
jobs:
  standard_analysis:
    runs-on: ubuntu-latest
    timeout-minutes: 8
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Set up Python Environment
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Required Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install websocket-client matplotlib requests python-telegram-bot
        
    - name: Execute Standard Timeframes Analysis
      env:
        DERIV_API_KEY: ${{ secrets.DERIV_API_KEY }}
        DERIV_APP_ID: ${{ secrets.DERIV_APP_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        DEBUG: ${{ secrets.DEBUG }}
        TEST_MODE: ${{ secrets.TEST_MODE }}
        TIMEFRAMES: "300"
      run: python main.py
      
    - name: Record Execution Status
      if: always()
      run: |
        echo "Standard analysis completed at $(date)"
        echo "Execution status: $?"

---

# .github/workflows/high_frequency_1s.yml
# Independent high-frequency 1s indices workflow
name: High-Frequency 1s Indices Bot

on:
  schedule:
    - cron: '*/2 * * * *'  # Every 2 minutes
  workflow_dispatch:
  
jobs:
  high_frequency_analysis:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Set up Python Environment
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Required Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install websocket-client requests python-telegram-bot
        
    - name: Execute High-Frequency Analysis
      env:
        DERIV_API_KEY: ${{ secrets.DERIV_API_KEY }}
        DERIV_APP_ID: ${{ secrets.DERIV_APP_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        DEBUG: ${{ secrets.DEBUG }}
        TEST_MODE: ${{ secrets.TEST_MODE }}
      run: python main_1s.py
      
    - name: Record Execution Status
      if: always()
      run: |
        echo "High-frequency analysis completed at $(date)"
        echo "Execution status: $?"

---

# .github/workflows/test_standard_bot.yml  
# Independent testing for standard timeframes
name: Test Standard Bot

on:
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Enable debug output'
        required: false
        default: true
        type: boolean
      test_symbols:
        description: 'Symbols to test'
        required: false
        default: 'V10,V50,V75'
        type: string

jobs:
  test_standard_system:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Set up Python Environment
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Required Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install websocket-client matplotlib requests python-telegram-bot
        
    - name: Execute Standard Bot Test
      env:
        DERIV_API_KEY: ${{ secrets.DERIV_API_KEY }}
        DERIV_APP_ID: ${{ secrets.DERIV_APP_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        DEBUG: ${{ github.event.inputs.debug_enabled }}
        TEST_MODE: "1"
        TIMEFRAMES: "300"
      run: python main.py

---

# .github/workflows/test_1s_bot.yml
# Independent testing for 1s indices
name: Test 1s Indices Bot

on:
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Enable debug output'
        required: false
        default: true
        type: boolean
      test_symbols:
        description: '1s symbols to test'
        required: false
        default: 'V75(1s),V100(1s),V150(1s)'
        type: string

jobs:
  test_1s_system:
    runs-on: ubuntu-latest
    timeout-minutes: 8
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Set up Python Environment
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Required Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install websocket-client requests python-telegram-bot
        
    - name: Execute 1s Bot Test
      env:
        DERIV_API_KEY: ${{ secrets.DERIV_API_KEY }}
        DERIV_APP_ID: ${{ secrets.DERIV_APP_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        DEBUG: ${{ github.event.inputs.debug_enabled }}
        TEST_MODE: "1"
      run: python main_1s.py

---

# .github/workflows/system_health_standard.yml
# Health monitoring for standard bot
name: Standard Bot Health Check

on:
  schedule:
    - cron: '15 */2 * * *'  # Every 2 hours at 15 minutes past
  workflow_dispatch:

jobs:
  health_check_standard:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Set up Python Environment
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Required Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install websocket-client requests matplotlib
        
    - name: Test Standard Bot Dependencies
      run: |
        python -c "
        import matplotlib.pyplot as plt
        import websocket
        import tempfile
        print('Standard bot dependencies: SUCCESS')
        "
        
    - name: Verify API Connection for Standard Symbols
      env:
        DERIV_API_KEY: ${{ secrets.DERIV_API_KEY }}
        DERIV_APP_ID: ${{ secrets.DERIV_APP_ID }}
      run: |
        python -c "
        import websocket, json, os
        symbols = ['R_10', 'R_50', 'R_75']
        for symbol in symbols:
            try:
                ws = websocket.create_connection('wss://ws.derivws.com/websockets/v3?app_id=' + os.getenv('DERIV_APP_ID', '1089'), timeout=10)
                ws.send(json.dumps({'ticks_history': symbol, 'style': 'candles', 'granularity': 300, 'count': 10, 'end': 'latest'}))
                resp = json.loads(ws.recv())
                ws.close()
                print(f'{symbol}: SUCCESS' if 'candles' in resp else f'{symbol}: FAILED')
            except Exception as e:
                print(f'{symbol}: FAILED - {str(e)}')
        "

---

# .github/workflows/system_health_1s.yml
# Independent health monitoring for 1s indices
name: 1s Indices Health Check

on:
  schedule:
    - cron: '45 */2 * * *'  # Every 2 hours at 45 minutes past
  workflow_dispatch:

jobs:
  health_check_1s:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Set up Python Environment
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Required Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install websocket-client requests
        
    - name: Test 1s Bot Dependencies
      run: |
        python -c "
        import websocket
        import json
        import tempfile
        print('1s bot dependencies: SUCCESS')
        "
        
    - name: Verify API Connection for 1s Symbols
      env:
        DERIV_API_KEY: ${{ secrets.DERIV_API_KEY }}
        DERIV_APP_ID: ${{ secrets.DERIV_APP_ID }}
      run: |
        python -c "
        import websocket, json, os
        symbols = ['1HZ75V', '1HZ100V', '1HZ150V']
        for symbol in symbols:
            try:
                ws = websocket.create_connection('wss://ws.derivws.com/websockets/v3?app_id=' + os.getenv('DERIV_APP_ID', '1089'), timeout=15)
                if os.getenv('DERIV_API_KEY'):
                    ws.send(json.dumps({'authorize': os.getenv('DERIV_API_KEY')}))
                    _ = ws.recv()
                ws.send(json.dumps({'ticks_history': symbol, 'style': 'candles', 'granularity': 1, 'count': 50, 'end': 'latest'}))
                resp = json.loads(ws.recv())
                ws.close()
                print(f'{symbol}: SUCCESS' if 'candles' in resp else f'{symbol}: FAILED')
            except Exception as e:
                print(f'{symbol}: FAILED - {str(e)}')
        "
        
    - name: Test Telegram Connection
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      run: |
        python -c "
        import requests, os
        try:
            token = os.getenv('TELEGRAM_BOT_TOKEN')
            if token:
                resp = requests.get(f'https://api.telegram.org/bot{token}/getMe', timeout=10)
                print('Telegram Connection:', 'SUCCESS' if resp.status_code == 200 else 'FAILED')
            else:
                print('Telegram Connection: SKIPPED (no token)')
        except Exception as e:
            print('Telegram Connection: FAILED -', str(e))
        "

---

# Repository Structure:
# 
# your-repo/
# ├── .github/
# │   └── workflows/
# │       ├── standard_trading_bot.yml      # Standard timeframes execution
# │       ├── high_frequency_1s.yml         # 1s indices execution  
# │       ├── test_standard_bot.yml         # Standard bot testing
# │       ├── test_1s_bot.yml              # 1s bot testing
# │       ├── system_health_standard.yml    # Standard bot health
# │       └── system_health_1s.yml         # 1s bot health
# ├── main.py                               # Standard timeframes bot
# ├── main_1s.py                           # High-frequency 1s bot
# ├── bot.py                               # Shared Telegram functions
# └── README.md
#
# Required GitHub Secrets:
# - DERIV_API_KEY          (Your Deriv API token)
# - DERIV_APP_ID           (Your Deriv App ID, default: 1089)
# - TELEGRAM_BOT_TOKEN     (Your Telegram bot token)
# - TELEGRAM_CHAT_ID       (Your Telegram chat ID)
# - DEBUG                  (Optional: "1" for debug mode)
# - TEST_MODE              (Optional: "1" for test mode)
#
# Workflow Independence Features:
# 
# 1. Separate Execution Schedules:
#    - Standard bot: Every 5 minutes
#    - 1s bot: Every 2 minutes
#    - Independent failure isolation
#    
# 2. Independent Testing:
#    - Separate manual test workflows
#    - Individual debug controls
#    - Symbol-specific testing
#    
# 3. Separate Health Monitoring:
#    - Standard bot health every 2 hours at :15
#    - 1s bot health every 2 hours at :45
#    - Symbol-specific connectivity tests
#    
# 4. Resource Isolation:
#    - Different timeout periods
#    - Separate dependency installations
#    - Independent error handling
#    
# 5. Deployment Benefits:
#    - Enable/disable systems independently
#    - Monitor performance separately
#    - Troubleshoot issues in isolation
#    - Scale execution frequency independently
